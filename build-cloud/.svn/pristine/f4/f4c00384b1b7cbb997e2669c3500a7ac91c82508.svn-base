package com.build.cloud.modules.task.service;

import java.util.Date;
import java.util.List;
import java.util.Set;

import org.apache.shiro.SecurityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.build.cloud.common.id.IdGenerator;
import com.build.cloud.common.utils.DateUtils;
import com.build.cloud.modules.fastdfs.service.IFileService;
import com.build.cloud.modules.punch.service.IPunchService;
import com.build.cloud.modules.punch.service.ISyncService;
import com.build.cloud.modules.sta.service.IStaEmploymentService;
import com.build.cloud.modules.sys.entity.SysFileEntityEntity;
import com.build.cloud.modules.sys.entity.SysFileUploadEntity;
import com.build.cloud.modules.sys.service.ISysFileEntityService;
import com.build.cloud.modules.sys.service.ISysFileUploadService;
import com.google.common.collect.Maps;
import com.sunsine.fastdfs.exception.FastDFSException;

import cn.hutool.core.collection.CollectionUtil;
import cn.hutool.core.date.DateUtil;

@Component
@EnableScheduling
public class ScheduledService {
	private static final Logger LOGGER = LoggerFactory.getLogger(ScheduledService.class);
	@Autowired
	private ISyncService syncService;
	@Autowired
	private IStaEmploymentService staEmploymentService;
	@Autowired
	private IPunchService punchService;
	@Autowired
	private IFileService fileService;
	@Autowired
	private ISysFileEntityService sysFileEntityService;
	@Autowired
	private ISysFileUploadService sysFileUploadService;

	@Autowired
	private StringRedisTemplate stringRedisTemplate;

	@Autowired
	private org.apache.shiro.mgt.SecurityManager securityManager;

	private void init() {
		SecurityUtils.setSecurityManager(securityManager);
	}

	/**
	 * @Title: syncUser
	 */
	// @Scheduled(cron = "0 0 0 1/1 * ?")
	// @Scheduled(cron = "0 0/2 0 * * ?")
	// public void syncUser() {
	// LOGGER.info("考勤机人员开始同步，开始时间：{}", DateUtil.now());
	// syncService.syncUser();
	// }
	// @Scheduled(cron = "0 0 0 1/7 * ?")
	// @Scheduled(cron = "0 0/2 0 * * ?")
	// public void syncDev() {
	// LOGGER.info("考勤机开始同步，开始时间：{}", DateUtil.now());
	// syncService.syncDev();
	// }
	// @Scheduled(cron = "0 0 10,15,23 * * ?")
	// @Scheduled(cron = "0 0/2 0 * * ?")
	// public void syncStatcard() {
	// LOGGER.info("考勤开始同步，开始时间：{}", DateUtil.now());
	// syncService.syncStatcard();
	// }
	// @Scheduled(cron = "0 0 2 * * ?")
//	 @Scheduled(cron = "0 0/1 * * * ?")
	 public void syncPunch() {
	 LOGGER.info("考勤数据开始同步，开始时间：{}", DateUtil.now());
	 init();
	// syncService.syncPunch();
	 punchService.queryPunch(Maps.newHashMap());
	 }
//	@Scheduled(cron = "0 0 0 1/1 * ?")
	// @Scheduled(cron = "0 49 15 * * ?")
	public void syncWorkerRecord() {
		LOGGER.info("用工统计开始同步，开始时间：{}", DateUtil.now());
		init();
		staEmploymentService.syncWorkerRecord();
	}
	
//	@Scheduled(cron="0/5 * *  * * ? ")
//	public void deleteFile() {
//		System.out.println("执行该方法");
//		List<SysFileUploadEntity> fileList = sysFileUploadService.selectList(new EntityWrapper<SysFileUploadEntity>().like("create_time", DateUtils.format(new Date())).isNull("biz_key"));
//		if(!CollectionUtil.isEmpty(fileList)) {
//			for (SysFileUploadEntity sysFileUploadEntity : fileList) {
//				SysFileEntityEntity entity = sysFileEntityService.selectById(sysFileUploadEntity.getFileId());
//				try {
//					System.out.println("正在进行文件删除");
//					fileService.deleteFile("group1", entity.getFilePath());
////					fastdfs_storage_upload_slave_by_filename1("1.jpg","group1/M00/00/00/wKgCx1ETdo2AFlXZAACCJ5iSa_k551.jpg","--del");
//					sysFileEntityService.deleteById(entity.getFileId());
//					sysFileUploadService.deleteById(sysFileUploadEntity.getId());
//				} catch (FastDFSException e) {
//					e.printStackTrace();
//				}
//			}
//		}
//		
//	}
	
//	@Scheduled(cron = "0 0 0 * * ?")
	public void resetGetNewMax() {
		try {
			// 模糊匹配keys
			Set<String> keys = stringRedisTemplate.keys(IdGenerator.LOCK_PREFIX + "*");
			if (keys != null && keys.size() > 0) {
				stringRedisTemplate.delete(keys);
			}
			LOGGER.info("定时任务开启>>>>>>  重置模块单据号，开始时间：{ " + DateUtil.format(new Date(), "yyyy-MM-dd HH:mm:ss") + " }");
		} catch (Exception e) {
			LOGGER.error("定时任务异常>>>>>>  重置模块单据号，开始时间：{ " + DateUtil.format(new Date(), "yyyy-MM-dd HH:mm:ss") + " }");
		}
	}

}