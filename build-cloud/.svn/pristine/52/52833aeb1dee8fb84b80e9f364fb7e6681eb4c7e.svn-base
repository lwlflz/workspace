package com.build.cloud.modules.bs.controller;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.RandomStringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.alibaba.fastjson.JSONObject;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.beust.jcommander.internal.Maps;
import com.build.cloud.common.constant.Constant.AdminType;
import com.build.cloud.common.utils.DateUtils;
import com.build.cloud.common.utils.FileUtil;
import com.build.cloud.common.utils.PageUtils;
import com.build.cloud.common.utils.StringUtil;
import com.build.cloud.common.utils.cache.RedisKeys;
import com.build.cloud.common.validator.ValidatorUtils;
import com.build.cloud.common.validator.group.AddGroup;
import com.build.cloud.common.validator.group.UpdateGroup;
import com.build.cloud.core.base.controller.AbstractController;
import com.build.cloud.core.base.controller.Result;
import com.build.cloud.modules.bs.bean.BsWorkerBean;
import com.build.cloud.modules.bs.dao.BsWorkerCertificateDao;
import com.build.cloud.modules.bs.dao.BsWorkerContractDao;
import com.build.cloud.modules.bs.entity.BsTeamEntity;
import com.build.cloud.modules.bs.entity.BsWorkerCertificateEntity;
import com.build.cloud.modules.bs.entity.BsWorkerContractEntity;
import com.build.cloud.modules.bs.entity.BsWorkerEntity;
import com.build.cloud.modules.bs.form.BsWorkerForm;
import com.build.cloud.modules.bs.service.IBsTeamService;
import com.build.cloud.modules.bs.service.IBsWorkerCertificateService;
import com.build.cloud.modules.bs.service.IBsWorkerContractService;
import com.build.cloud.modules.bs.service.IBsWorkerService;
import com.build.cloud.modules.fastdfs.service.IFileService;
import com.build.cloud.modules.productplan.dto.ProContract;
import com.build.cloud.modules.productplan.dto.ProRotaWorker;
import com.build.cloud.modules.productplan.service.IProContractService;
import com.build.cloud.modules.productplan.service.IProRotaWorkerService;
import com.build.cloud.modules.productplan.service.impl.ProRotaWorkerServiceImpl;
import com.build.cloud.modules.sys.entity.SysEmployeeEntity;
import com.build.cloud.modules.sys.entity.SysUserEntity;
import com.build.cloud.modules.sys.entity.SysUserRoleEntity;
import com.build.cloud.modules.sys.service.ISysEmployeeService;
import com.build.cloud.modules.sys.service.ISysFileEntityService;
import com.build.cloud.modules.sys.service.ISysFileUploadService;
import com.build.cloud.modules.sys.service.ISysUserRoleService;
import com.build.cloud.modules.sys.service.ISysUserService;
import com.build.cloud.modules.sys.shiro.ShiroUtils;
import com.google.common.collect.Lists;
import com.sunsine.common.util.MathUtil;
import com.sunsine.fastdfs.FastDfsInfo;
import com.sunsine.fastdfs.exception.FastDFSException;

import cn.hutool.core.bean.BeanUtil;
import cn.hutool.core.collection.CollectionUtil;
import cn.hutool.core.date.DateUtil;
import cn.hutool.core.map.MapUtil;
import cn.hutool.core.util.StrUtil;
/**
 * @ClassName: BsWorkerController
 * @Description: 劳务用工
 * @author: liutao
 * @date: 2018年4月13日 下午3:27:44
 */
@RestController
@RequestMapping("/bs/worker")
public class BsWorkerController extends AbstractController {
	@Autowired
	private IBsWorkerService bsWorkerService;
	@Autowired
	private ISysUserService sysUserService;
	@Autowired
	private ISysEmployeeService employeeService;
	@Autowired
	private IBsWorkerService workerService;
	@Autowired
	private IProContractService proContractService;
	@Autowired
	private IBsTeamService bsTeamService;
	@Autowired
	private ISysUserRoleService sysUserRoleService;
	@Autowired
	private IFileService fileService;
	@Autowired
	private IBsWorkerCertificateService bsWorkerCertificateService;
	@Autowired
	private IBsWorkerContractService bsWorkerContractService;
	@Autowired
	private IProRotaWorkerService proRotaWorkerService;

	/**
	 * 列表
	 */
	@GetMapping("/v1/list")
	@RequiresPermissions("bs:worker:list")
	public Result list(@RequestParam Map<String, Object> params) {
		String companyId = redisUtils.get(RedisKeys.getDefCom(getUserId()));
		params.put("companyId", companyId);//获取登录选择公司ID进行实名人员列表数据隔离
		PageUtils page = bsWorkerService.queryPage(params);
		return Result.ok().put(page);
	}
	@GetMapping("/v1/queryByCompany")
	public Result queryByCompany(@RequestParam Map<String, Object> params) {
		String companyId = MapUtil.getStr(params, "companyId");
		if (StrUtil.isEmpty(companyId)) {
			return Result.error("请选择公司！");
		}
		List<Map<String, Object>> list = bsWorkerService.selectWorker(params);
		return Result.ok().putList(list);
	}
	/**
	 * 获取工种（下拉框使用）
	 */
	@GetMapping("/v1/getWorkType")
	public Result getWorkType() {
		return Result.ok().putList(super.getType());
	}
	/**
	 * 信息
	 */
	@GetMapping("/v1/info")
	@RequiresPermissions("bs:worker:info")
	public Result info(String id) {
		BsWorkerEntity bsWorker = bsWorkerService.selectById(id);
		bsWorker.setWorkerCertificateList(bsWorkerCertificateService.selectList(new EntityWrapper<BsWorkerCertificateEntity>().eq("worker_id", id)));
		List<BsWorkerContractEntity> contractList = bsWorkerContractService.selectList(new EntityWrapper<BsWorkerContractEntity>().eq("worker_id", id));
		for (BsWorkerContractEntity bsWorkerContractEntity : contractList) {
			if(!StrUtil.isBlank(bsWorkerContractEntity.getAttachmentUrl()) && !StrUtil.isBlank(bsWorkerContractEntity.getAttachmentName())) {
				bsWorkerContractEntity.setAttachmentList(stringToList(bsWorkerContractEntity.getAttachmentUrl(),bsWorkerContractEntity.getAttachmentName()));
			}else {
				bsWorkerContractEntity.setAttachmentList(Lists.newArrayList());
			}
		}
		bsWorker.setWorkerContractList(contractList);
		
		return Result.ok().putEntity(bsWorker);
	}
	@PostMapping("/v1/export")
	// @RequiresPermissions("bs:worker:export")
	public Result export(HttpServletRequest request) {
		return Result.ok();
	}
	@GetMapping("/v1/downloadTem")
	// @RequiresPermissions("bs:worker:downloadTem")
	public Result downloadTem(HttpServletResponse response) {
		File file = new File("C:/test.txt");
		String fileName = "test";
		response.setHeader("content-type", "application/octet-stream");
		response.setContentType("application/octet-stream");
		response.setHeader("Content-Disposition", "attachment;filename=" + fileName);
		byte[] buff = new byte[1024];
		try (OutputStream os = response.getOutputStream();
				BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));) {
			int i = bis.read(buff);
			while (i != -1) {
				os.write(buff, 0, buff.length);
				os.flush();
				i = bis.read(buff);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return Result.ok();
	}
	@GetMapping("/v1/getInfoByIdCard")
	public Result getInfoByIdCard(String idcard) {
		if (com.sunsine.common.util.StringUtil.isNull(idcard)) {
			return Result.ok();
		}
		Map<String, Object> params = Maps.newHashMap();
		params.put("idcard", idcard);
		List<BsWorkerBean> list = workerService.getInfoByIdCard(params);
		Map<String, Object> result = Maps.newHashMap();
		if (CollectionUtil.isNotEmpty(list)) {
			result.put("entity", list.get(0));
		} else {
			result.put("entity", "");
		}
		List<Map<String, Object>> mList = Lists.newArrayList();
		for (BsWorkerBean bean : list) {
			Map<String, Object> info = Maps.newHashMap();
			info.put("companyName", bean.getCompanyName());
			info.put("entryDate", bean.getEntryDate());
			info.put("attendTime", MathUtil.divide(bean.getAttendTime(), 24, 1));
			mList.add(info);
		}
		result.put("list", mList);
		return Result.ok().put(result);
	}
	
	/**
	 * 保存
	 */
	@Transactional
	@PostMapping("/v1/save")
	@RequiresPermissions("bs:worker:save")
	public Result save(@RequestBody BsWorkerForm form,HttpServletRequest request) {
		ValidatorUtils.validateEntity(form, AddGroup.class);
		EntityWrapper<SysUserEntity> wrapper = new EntityWrapper<SysUserEntity>();
		if(!StrUtil.isBlank(form.getPhone())) {
			wrapper.eq("company_id", getCurrentCompanyId());
			wrapper.eq("login_name", form.getLoginName());
			wrapper.or();
			wrapper.eq("mobile", form.getPhone());
			int count = sysUserService.selectCount(wrapper);
			if (count > 0) {
				return Result.error("登录用户【" + form.getLoginName() + "】，或者此【" + form.getPhone() + "】手机号码已存在！");
			}
		}else {
			wrapper.eq("company_id", getCurrentCompanyId());
			wrapper.eq("login_name", form.getLoginName());
			int count = sysUserService.selectCount(wrapper);
			if (count > 0) {
				return Result.error("登录用户【" + form.getLoginName() + "】已存在！");
			}
		}
		
		int employeeCount = employeeService.selectCount(new EntityWrapper<SysEmployeeEntity>().eq("id_num", form.getIdcard()));
		int workCount = workerService.selectCount(new EntityWrapper<BsWorkerEntity>().eq("idcard", form.getIdcard()).eq("company_id", getCurrentCompanyId()));
		if(employeeCount > 0 || workCount > 0) {
			return Result.error("该身份证号码已存在！");
		}
		SysUserEntity userEntity = new SysUserEntity();
		userEntity.setUserName(form.getName());
		userEntity.setLoginName(form.getLoginName());
		String salt = RandomStringUtils.randomAlphanumeric(20);
		userEntity.setSalt(salt);
		if (com.sunsine.common.util.StringUtil.isNull(form.getPassword())) {
			userEntity.setPassword(ShiroUtils.sha256(StringUtil.getIdcard6(form.getIdcard()), salt));
		} else {
			userEntity.setPassword(ShiroUtils.sha256(form.getPassword(), salt));
		}
		userEntity.setMobile(form.getPhone());
		userEntity.setUserType("2"); // 劳务工
		userEntity.setCorpCode(getUser().getCorpCode());
		userEntity.setCorpName(getUser().getCorpName());
		userEntity.setStatus(StrUtil.isBlank(form.getStatus()) ? "0" : form.getStatus());
		userEntity.setMgrType(AdminType.NONAMIN.getValue()); // 管理员类型（0非管理员 1超级管理员 2系统管理员）
		userEntity.setCompanyId(getCurrentCompanyId());
		BsWorkerEntity workerEntity = new BsWorkerEntity();
		BeanUtil.copyProperties(form, workerEntity);
		workerEntity.setCompanyId(getCurrentCompanyId());
		workerEntity.setEntryDate(DateUtil.date());
		bsWorkerService.save(workerEntity, userEntity);
		return Result.ok("劳务实名信息增加成功！").put(workerEntity.getId());
	}
	
	/**
	 * 修改
	 */
	@PostMapping("/v1/update")
	@RequiresPermissions("bs:worker:update")
	public Result update(@RequestBody BsWorkerForm form) {
		ValidatorUtils.validateEntity(form, UpdateGroup.class);
		if (StrUtil.isBlank(form.getId())) {
			return Result.error("请选择要修改的数据！");
		}
		BsWorkerEntity workerEntity = bsWorkerService.selectById(form.getId());
		EntityWrapper<SysUserEntity> ew = new EntityWrapper<SysUserEntity>();
		ew.eq("login_name", form.getLoginName());
		ew.ne("id", workerEntity.getUserId());
		int count = sysUserService.selectCount(ew);
		if (count > 0) {
			return Result.error("登录用户【" + form.getLoginName() + "】已经存在！");
		}
		SysUserEntity userEntity = sysUserService.selectById(workerEntity.getUserId());
		// ===========================================
		if (StrUtil.isNotBlank(form.getName())) {
			userEntity.setUserName(form.getName());
			workerEntity.setName(form.getName());
		}
		if (StrUtil.isNotBlank(form.getLoginName())) {
			userEntity.setLoginName(form.getLoginName());
		}
		if (StrUtil.isNotBlank(form.getNational())) {
			workerEntity.setNational(form.getNational());
		}
		if (StrUtil.isNotBlank(form.getRecentlyImgUrl())) {
			workerEntity.setRecentlyImgUrl(form.getRecentlyImgUrl());
		}
		if (StrUtil.isNotBlank(form.getIdcardImgUrl())) {
			workerEntity.setIdcardImgUrl(form.getIdcardImgUrl());
		}
		if (StrUtil.isNotBlank(form.getPassword())) {
			userEntity.setPassword(form.getPassword());
		}
		if (StrUtil.isNotBlank(form.getPhone())) {
			userEntity.setMobile(form.getPhone());
			workerEntity.setPhone(form.getPhone());
		}
		if (StrUtil.isNotBlank(form.getIdcard())) {
			workerEntity.setIdcard(form.getIdcard());
		}
		if (StrUtil.isNotBlank(form.getWorkType())) {
			workerEntity.setWorkType(form.getWorkType());
		}
		if (form.getAge() != null) {
			workerEntity.setAge(form.getAge());
		}
		// if (StrUtil.isNotBlank(form.getBank())) {
		workerEntity.setBank(form.getBank());
		// }
		// if (StrUtil.isNotBlank(form.getBankAccount())) {
		workerEntity.setBankAccount(form.getBankAccount());
		// }
		if (form.getWage() != null) {
			workerEntity.setWage(form.getWage());
		}
		if (StrUtil.isNotBlank(form.getSkillLevel())) {
			workerEntity.setSkillLevel(form.getSkillLevel());
		}
		if (StrUtil.isNotBlank(form.getArea())) {
			workerEntity.setArea(form.getArea());
		}
		if (StrUtil.isNotBlank(form.getStatus())) {
			userEntity.setStatus(form.getStatus());
			if (form.getStatus().equals("3")) {
				userEntity.setDepartureDate(DateUtil.date());
			}
		}
		workerEntity.setCompanyId(getCurrentCompanyId());
		if (!CollectionUtil.isEmpty(form.getWorkerCertificateList())) {
			workerEntity.setWorkerCertificateList(form.getWorkerCertificateList());
		}
		if (!CollectionUtil.isEmpty(form.getWorkerContractList())) {
			workerEntity.setWorkerContractList(form.getWorkerContractList());
		}
		// ===========================================
		bsWorkerService.update(workerEntity, userEntity);
		return Result.ok("劳务实名信息修改成功！").put(form.getId());
	}
	/**
	 * 删除
	 */
	@PostMapping("/v1/delete")
	@RequiresPermissions("bs:worker:delete")
	public Result delete(@RequestBody String id) {
		id = getDelId(id);
		if (StrUtil.isBlank(id)) {
			return Result.error("ID不能为空");
		}
		BsWorkerEntity workerEntity = bsWorkerService.selectById(id);
		//查询合同关联
		List<ProContract> contractList = proContractService.selectList(new EntityWrapper<ProContract>().eq("duty_id", id));
		if(!CollectionUtil.isEmpty(contractList)) {
			return Result.error("数据已与合同进行关联，请检查");
		}
		//查询班组关联
		List<BsTeamEntity> teamList = bsTeamService.selectList(new EntityWrapper<BsTeamEntity>().eq("team_leader_id", id));
		if(!CollectionUtil.isEmpty(teamList)) {
			return Result.error("数据已与班组进行关联，请检查");
		}
		//查询角色关联
		List<SysUserRoleEntity> userRoleList = sysUserRoleService.selectList(new EntityWrapper<SysUserRoleEntity>().eq("user_id", workerEntity.getUserId()));
		if(!CollectionUtil.isEmpty(userRoleList)) {
			return Result.error("数据已与角色进行关联，请检查");
		}
		
		//查询劳务实名关联
		List<ProRotaWorker> rotaWorkList = proRotaWorkerService.selectList(new EntityWrapper<ProRotaWorker>().eq("worker_id", id));
		if(!CollectionUtil.isEmpty(rotaWorkList)) {
			return Result.error("数据已与劳务实名进行关联，请检查");
		}
		
		BsWorkerEntity entity = bsWorkerService.selectById(id);
		if(entity != null && !StrUtil.isBlank(entity.getIdcardImgUrl()) && !StrUtil.isBlank(entity.getRecentlyImgUrl())) {
			try {
				fileService.deleteFile("group1", entity.getIdcardImgUrl());
				fileService.deleteFile("group1", entity.getRecentlyImgUrl());
			} catch (FastDFSException e) {
				e.printStackTrace();
				return Result.error("文件删除失败");
			}
		}
		bsWorkerService.deleteById(id);
		sysUserService.delete(new EntityWrapper<SysUserEntity>().eq("id", workerEntity.getUserId()));
		
		return Result.ok("删除成功");
	}
	/**
	 * 文件上传
	 * @param mFiles
	 * @return
	 */
	@PostMapping("/v1/upload")
	public Result upload(HttpServletRequest request) {
		String imgPath = "";
		try {
			String fileString = request.getParameter("base64");
			if(!StrUtil.isBlank(fileString)) {
				MultipartFile multipartFile = FileUtil.base64ToMultipart(fileString);
				imgPath = fileUpload(multipartFile);
			}else {
				MultipartHttpServletRequest mRequest = (MultipartHttpServletRequest) request;
				Map<String, MultipartFile> mMap = mRequest.getFileMap();
				if(!mMap.isEmpty()) {
					for (Entry<String, MultipartFile> entry : mMap.entrySet()) {
						MultipartFile multipartFile = entry.getValue();
						imgPath = fileUpload(multipartFile);
					}
				}
			}	
			if(!StrUtil.isBlank(imgPath)) {
				imgPath = imgPath.substring(0,imgPath.length()-1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			return Result.error("文件上传异常");
		}
		return Result.ok("文件上传成功").putObject("url", imgPath);
	}
	
	@PostMapping("/v1/deleteFile")
	public Result deleteFile(@RequestBody String str) {
		JSONObject obj = JSONObject.parseObject(str);
		String pathName = (String)obj.get("pathName");
		try {
			fileService.deleteFile("group1", pathName);
		} catch (FastDFSException e) {
			e.printStackTrace();
			return Result.error("文件删除失败");
		}
		return Result.ok("文件删除成功");
	}
	
	private String fileUpload(MultipartFile multipartFile)throws Exception{
		String imgPath = "";
		File file = FileUtil.convert(multipartFile);
		FastDfsInfo fast = fileService.upload(file.getPath());
		imgPath += fast.getPath() +",";
		if (file != null) {
			cn.hutool.core.io.FileUtil.del(file);
		}
		return imgPath;
	}
	
	private List<Map<String, Object>> stringToList(String url,String name){
		List<Map<String, Object>> list = Lists.newArrayList();
		String[] a =  url.split(",", url.length()-1);
		String[] b =  name.split(",", name.length()-1);
		for (int i = 0; i < a.length; i++) {
			Map<String, Object> map = Maps.newHashMap();
			map.put("url", a[i]);
			map.put("name", b[i]);
			list.add(map);
		}
		return list;
		
	}
	public static void main(String[] args) {
		String a = DateUtils.dateToStamp();
		System.out.println(a);
	}
	
}
