package com.build.cloud.modules.punch.service.impl;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.baomidou.mybatisplus.service.impl.ServiceImpl;
import com.build.cloud.common.utils.PageUtils;
import com.build.cloud.common.utils.Query;
import com.build.cloud.modules.punch.dao.ProAttendDao;
import com.build.cloud.modules.punch.entity.ProAttendEntity;
import com.build.cloud.modules.punch.entity.PunchEntity;
import com.build.cloud.modules.punch.service.IProAttendService;
import com.build.cloud.modules.punch.service.IPunchService;
import com.google.common.collect.Lists;

import cn.hutool.core.bean.BeanUtil;
import cn.hutool.core.date.DateUtil;
import cn.hutool.core.map.MapUtil;
import cn.hutool.core.util.StrUtil;
@Service("proAttendService")
public class ProAttendServiceImpl extends ServiceImpl<ProAttendDao, ProAttendEntity> implements IProAttendService {
	private static final Logger LOG = LoggerFactory.getLogger(ProAttendServiceImpl.class);
	private static final String HM = "HH:mm";
	@Autowired
	private IPunchService punchService;
	@Override
	public PageUtils queryPage(Map<String, Object> params) {
		String projectId = MapUtil.getStr(params, "projectId");
		String userName = MapUtil.getStr(params, "userName");
		String startTime = MapUtil.getStr(params, "startTime");
		String endTime = MapUtil.getStr(params, "endTime");
		String typeCode = MapUtil.getStr(params, "code");
		EntityWrapper<ProAttendEntity> ew = new EntityWrapper<ProAttendEntity>();
		
		if (StrUtil.isNotEmpty(projectId)) {
			ew.eq("project_id", projectId);
		}
		if (StrUtil.isNotEmpty(userName)) {
			ew.like("user_name", userName);
		}
		if (StrUtil.isNotEmpty(startTime) && StrUtil.isNotEmpty(endTime)) {
			ew.between("attend_date", startTime, endTime);
		}
		if (StrUtil.isNotEmpty(startTime) && StrUtil.isEmpty(endTime)) {
//			ew.and("attend_date >= {0}", startTime);
			ew.ge("attend_date", startTime);
		}
		if (StrUtil.isEmpty(startTime) && StrUtil.isNotEmpty(endTime)) {
//			ew.and("attend_date <= {0}", endTime);
			ew.le("attend_date", endTime);
		}
		if (StrUtil.isNotEmpty(typeCode)) {
			ew.eq("type_code", typeCode);
		}
		ew.orderBy(" attend_date DESC");
		Page<ProAttendEntity> page =
			this.selectPage(new Query<ProAttendEntity>(params).getPage(), ew);
		return new PageUtils(page);
	}
	@Override
	public void handlePunch() {
		List<PunchEntity> punchList = punchService.queryStatCard();
		List<ProAttendEntity> pEntities = Lists.newArrayList();
		for (PunchEntity punchEntity : punchList) {
			LOG.info("punchEntity===" + punchEntity.toString());
			ProAttendEntity proAttendEntity = new ProAttendEntity();
			BeanUtil.copyProperties(punchEntity, proAttendEntity);
			if (punchEntity.getIsIn().equals("1")) {
				proAttendEntity.setEntryTime(DateUtil.format(punchEntity.getTsCard(), HM));
			} else if (punchEntity.getIsIn().equals("2")) {
				proAttendEntity.setExitTime(DateUtil.format(punchEntity.getTsCard(), HM));
			}
			LOG.info("proAttendEntity===" + proAttendEntity.toString());
			pEntities.add(proAttendEntity);
		}
	}
	@Override
	public Map<String, Object> queryMaxDate() {
		return baseMapper.queryMaxDate();
	}
	@Override
	public Map<String, Object> queryCrossDay(Map<String, Object> param) {
		return baseMapper.queryCrossDay(param);
	}
}
