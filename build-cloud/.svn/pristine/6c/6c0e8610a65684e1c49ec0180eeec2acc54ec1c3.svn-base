package com.build.cloud.modules.productplan.service.impl;

import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Task;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.baomidou.mybatisplus.service.impl.ServiceImpl;
import com.build.cloud.common.activity.pojo.TaskIdMapPojo;
import com.build.cloud.common.activity.service.ActivityService;
import com.build.cloud.common.constant.ActivityConstant;
import com.build.cloud.common.utils.PageUtils;
import com.build.cloud.common.utils.Query;
import com.build.cloud.modules.bs.entity.BsBussinessEntity;
import com.build.cloud.modules.bs.entity.BsRectificationEntity;
import com.build.cloud.modules.bs.entity.BsWorkerEntity;
import com.build.cloud.modules.bs.service.IBsBussinessService;
import com.build.cloud.modules.bs.service.IBsProjectService;
import com.build.cloud.modules.bs.service.IBsWorkerService;
import com.build.cloud.modules.productplan.dao.ProContractMapper;
import com.build.cloud.modules.productplan.dto.ProContract;
import com.build.cloud.modules.productplan.dto.ProContractPayment;
import com.build.cloud.modules.productplan.dto.ProContractPlandetail;
import com.build.cloud.modules.productplan.dto.ProContractProjectlist;
import com.build.cloud.modules.productplan.dto.ProPlanDetail;
import com.build.cloud.modules.productplan.dto.ProPlanInfo;
import com.build.cloud.modules.productplan.service.IProContractPaymentService;
import com.build.cloud.modules.productplan.service.IProContractPlandetailService;
import com.build.cloud.modules.productplan.service.IProContractProjectlistService;
import com.build.cloud.modules.productplan.service.IProContractService;
import com.build.cloud.modules.productplan.service.IProPlanDetailService;
import com.build.cloud.modules.productplan.service.IProPlanInfoService;
import com.build.cloud.modules.sys.shiro.ShiroUtils;
import com.google.common.base.Objects;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import com.sunsine.common.util.MathUtil;

import cn.hutool.core.collection.CollectionUtil;
import cn.hutool.core.map.MapUtil;
import cn.hutool.core.util.StrUtil;

/**
 * <p>
 * 服务实现类
 * </p>
 *
 * @author liangsen
 * @since 2018-04-23
 */
@Service
public class ProContractServiceImpl extends ServiceImpl<ProContractMapper, ProContract> implements IProContractService {
	@Autowired
	private IProContractPaymentService proContractPaymentService;

	@Autowired
	private IProContractProjectlistService proContractProjectlistService;

	@Autowired
	private IProContractPlandetailService proContractPlandetailService;

	@Autowired
	private IProPlanInfoService proPlanInfoService;

	@Autowired
	private IProPlanDetailService proPlanDetailService;

	@Autowired
	private IBsWorkerService bsWorkerService;

	@Autowired
	private IBsBussinessService bsBussinessService;

	@Autowired
	private ActivityService activityService;

	@Autowired
	private IBsProjectService bsProjectService;

	/**
	 * 保存合同(包含文本、付款协议、工程量清单)
	 * 
	 * @param proContract
	 */
	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public void insertProContract(ProContract proContract) {
		baseMapper.insert(proContract);

		List<ProContractPayment> conPaymentList = proContract.getConPaymentList();
		List<ProContractProjectlist> conProjectList = proContract.getConProjectList();
		if (conPaymentList != null && conPaymentList.size() > 0) {
			for (ProContractPayment proContractPayment : conPaymentList) {
				proContractPayment.setConId(proContract.getId());
			}
			proContractPaymentService.insertBatch(conPaymentList);
		}
		if (conProjectList != null && conProjectList.size() > 0) {
			for (ProContractProjectlist proContractProject : conProjectList) {
				proContractProject.setConId(proContract.getId());
			}
			proContractProjectlistService.insertBatch(conProjectList);
		}
	}

	/**
	 * 修改合同(包含文本、付款协议、工程量清单)
	 * 
	 * @param proContract
	 */
	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public void updateProContract(ProContract proContract) {
		if (StrUtil.isNotBlank(proContract.getId())) {
			baseMapper.updateById(proContract);

			// 删除合同付款协议
			EntityWrapper<ProContractPayment> payEw = new EntityWrapper<ProContractPayment>();
			payEw.eq("con_id", proContract.getId());
			proContractPaymentService.delete(payEw);
			// 删除合同工程量清单
			EntityWrapper<ProContractProjectlist> proEw = new EntityWrapper<ProContractProjectlist>();
			proEw.eq("con_id", proContract.getId());
			proContractProjectlistService.delete(proEw);

			List<ProContractPayment> conPaymentList = proContract.getConPaymentList();
			List<ProContractProjectlist> conProjectList = proContract.getConProjectList();

			if (conPaymentList != null && conPaymentList.size() > 0) {
				for (ProContractPayment proContractPayment : conPaymentList) {
					proContractPayment.setConId(proContract.getId());
				}
				proContractPaymentService.insertBatch(conPaymentList);
			}
			if (conProjectList != null && conProjectList.size() > 0) {
				for (ProContractProjectlist proContractProject : conProjectList) {
					proContractProject.setConId(proContract.getId());
				}
				proContractProjectlistService.insertBatch(conProjectList);
			}
		}
	}

	/**
	 * 合同文本查询
	 */
	@Override
	public ProContract selectProContractById(ProContract proContract) {
		ProContract resContract = baseMapper.selectById(proContract.getId());
		if (resContract == null) {
			return null;
		}

		BsWorkerEntity worker = bsWorkerService.selectById(resContract.getDutyId());
		if (worker != null) {
			resContract.setDutyDname(worker.getName());
		}

		BsBussinessEntity aEntity = bsBussinessService.selectById(resContract.getParta());
		BsBussinessEntity bEntity = bsBussinessService.selectById(resContract.getPartb());
		if (aEntity != null) {
			resContract.setPartaName(aEntity.getBussinessName());
		}
		if (bEntity != null) {
			resContract.setPartbName(bEntity.getBussinessName());
		}

		EntityWrapper<ProContractPayment> payEw = new EntityWrapper<ProContractPayment>();
		payEw.eq("con_id", proContract.getId());
		resContract.setConPaymentList(proContractPaymentService.selectList(payEw));

		EntityWrapper<ProContractProjectlist> proEw = new EntityWrapper<ProContractProjectlist>();
		proEw.eq("con_id", proContract.getId());
		resContract.setConProjectList(proContractProjectlistService.selectList(proEw));

		if (resContract != null && !StringUtils.isEmpty(resContract.getActivityinsId())
				&& !Objects.equal(resContract.getReturnStatus(), "1")) {
			// 设置是否允许弃审
			String endChecker = activityService.getEndChecker(resContract.getActivityinsId());
			if (Objects.equal(ShiroUtils.getUserId(), endChecker) && Objects.equal(resContract.getCheckStatus(), "2")) {
				resContract.setEndCheckerFlag(true);
			}
			// 设置当前审核人id
			List<String> checkerList = activityService.findNowChecker(resContract.getActivityinsId());
			if (checkerList != null && checkerList.size() > 0) {
				resContract.setNowCheckerList(checkerList);
			}
			// 会签时,工作流当前任务列表,当前用户等于任务办理人时,取此任务的任务id为执行任务id
			List<Task> taskList = activityService.getNowTaskList(resContract.getActivityinsId());
			for (Task task : taskList) {
				if (Objects.equal(task.getAssignee(), ShiroUtils.getUserId())) {
					resContract.setTaskId(task.getId());
				}
			}
		}

		return resContract;
	}

	/**
	 * 合同拆分选择生产计划界面查询
	 * 
	 * @param proContract
	 * @return
	 */
	@Override
	public List<ProPlanDetail> selectConSplitPlan(ProContract proContract) {
		// 查询生产计划主表
		ProPlanInfo proPlanInfo = new ProPlanInfo();
		proPlanInfo.setEffStatus("1");// 已生效
		proPlanInfo.setProjectId(proContract.getProjectId());
		EntityWrapper<ProPlanInfo> proPlanEw = new EntityWrapper<ProPlanInfo>();
		proPlanEw.setEntity(proPlanInfo);
		ProPlanInfo proPlanInfoRes = proPlanInfoService.selectOne(proPlanEw);

		// 查询合同拆分详情
		EntityWrapper<ProContractPlandetail> temPcpEw = new EntityWrapper<ProContractPlandetail>();
		temPcpEw.eq("con_id", proContract.getId());
		List<ProContractPlandetail> temPcpList = proContractPlandetailService.selectList(temPcpEw);
		// 查询生产计划详情，判断是否选中
		EntityWrapper<ProPlanDetail> ppdEw = new EntityWrapper<ProPlanDetail>();
		ppdEw.eq("pro_id", proPlanInfoRes.getId());
		List<ProPlanDetail> ppdList = proPlanDetailService.selectList(ppdEw);
		for (ProPlanDetail proPlanDetail : ppdList) {
			// 是否选中
			for (ProContractPlandetail temp : temPcpList) {
				if (Objects.equal(proPlanDetail.getUniqueId(), temp.getProplanUnique())) {
					proPlanDetail.setSelected(true);
					break;
				}
			}
			// 是否禁用
			if (proPlanDetail.getConsplitId() != null
					&& !Objects.equal(proPlanDetail.getConsplitId(), proContract.getId())) {
				proPlanDetail.setEnabled(false);
			}
		}

		return ppdList;
	}

	/**
	 * 合同拆分展示
	 * 
	 * @param proContract
	 * @return
	 */
	public List<ProContractPlandetail> selectConSplit(ProContract proContract) {
		// 查询生产计划主表
//		ProPlanInfo proPlanInfo = new ProPlanInfo();
//		proPlanInfo.setEffStatus("1");//已生效
//		proPlanInfo.setProjectId(proContract.getProjectId());
//		EntityWrapper<ProPlanInfo> proPlanEw = new EntityWrapper<ProPlanInfo>();
//		proPlanEw.setEntity(proPlanInfo);
//		ProPlanInfo proPlanInfoRes = proPlanInfoService.selectOne(proPlanEw);

		// 查询合同拆分详情
//		EntityWrapper<ProContractPlandetail> temPcpEw = new EntityWrapper<ProContractPlandetail>();
//		temPcpEw.eq("con_id", proContract.getId());
//		List<ProContractPlandetail> temPcpList = proContractPlandetailService.selectList(temPcpEw);
//		//查询生产计划详情，转换成合同拆分详情
//		List<ProContractPlandetail> pcpList = Lists.newArrayList();
//		EntityWrapper<ProPlanDetail> ppdEw = new EntityWrapper<ProPlanDetail>();
//		ppdEw.eq("pro_id", proPlanInfoRes.getId());
//		List<ProPlanDetail> ppdList = proPlanDetailService.selectList(ppdEw);
//		for (ProPlanDetail proPlanDetail : ppdList) {
//			ProContractPlandetail pcp = new ProContractPlandetail();
//			for (ProContractPlandetail temp : temPcpList) {
//				if(Objects.equal(proPlanDetail.getLeaf(), "1")
//						&&Objects.equal(proPlanDetail.getUniqueId(), temp.getProplanUnique())){
//					pcp.setPlanDetail(proPlanDetail);
//					break;
//				}
//			}
//		}
//		proContract.setDetailList(pcpList);

//		//查询合同拆分详情
//		EntityWrapper<ProContractPlandetail> pcpEw = new EntityWrapper<ProContractPlandetail>();
//		pcpEw.eq("con_id", proContract.getId());
//		List<ProContractPlandetail> pcpList = proContractPlandetailService.selectList(pcpEw);
		ProContractPlandetail pcpParam = new ProContractPlandetail();
		pcpParam.setConId(proContract.getId());
		List<ProContractPlandetail> pcpList = proContractPlandetailService.selectConDetail(pcpParam);
		// 将生产计划详情信息融入到合同拆分详情
//		for (ProContractPlandetail proContractPlandetail : pcpList) {
//			EntityWrapper<ProPlanDetail> ppdEw = new EntityWrapper<ProPlanDetail>();
//			ppdEw.eq("pro_id", proPlanInfoRes.getId());
//			ppdEw.eq("unique_id", proContractPlandetail.getProplanUnique());
//			ProPlanDetail ppd = proPlanDetailService.selectOne(ppdEw);
//			
//			proContractPlandetail.setWbsName(ppd.getWbsName());
//			proContractPlandetail.setNameProperty(ppd.getNameProperty());
//			proContractPlandetail.setPlanBeginDate(ppd.getPlanBeginDate());
//			proContractPlandetail.setPlanEndDate(ppd.getPlanEndDate());
//			proContractPlandetail.setDuration(ppd.getDuration());
//			proContractPlandetail.setQuantities(ppd.getQuantities());
//			proContractPlandetail.setUnit(ppd.getUnit());
//			proContractPlandetail.setParentId(ppd.getParentId());
//		}
//		proContract.setDetailList(pcpList);

		// 合同付款节点列表查询
//		EntityWrapper<ProContractPayment> pcpayEw = new EntityWrapper<ProContractPayment>();
//		pcpayEw.eq("con_id", proContract.getId());
//		List<ProContractPayment> pcpayList = proContractPaymentService.selectList(pcpayEw);
//		proContract.setConPaymentList(pcpayList);

		return pcpList;
	}

	/**
	 * 合同拆分保存
	 */
	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public void insertConSplit(ProContract proContract) {
		// 原拆分已存在列表
		EntityWrapper<ProContractPlandetail> ew = new EntityWrapper<ProContractPlandetail>();
		ew.eq("con_id", proContract.getId());
		List<ProContractPlandetail> temList = proContractPlandetailService.selectList(ew);
		Set<String> temSet = Sets.newHashSet();
		for (ProContractPlandetail proContractPlandetail : temList) {
			temSet.add(proContractPlandetail.getProplanUnique());
		}

		Set<String> hitSet = Sets.newHashSet();
		List<ProContractPlandetail> splitList = proContract.getDetailList();
		if (splitList != null) {
			for (ProContractPlandetail proContractPlandetail : splitList) {
				proContractPlandetail.setConId(proContract.getId());
				proContractPlandetail.setProjectId(proContract.getProjectId());
				if (temList != null && temList.size() > 0) {
					// 匹配此次拆分和原拆分的行号，相等则保留此行号对应的拆分数据
					for (ProContractPlandetail temDetail : temList) {
						if (Objects.equal(temDetail.getProplanUnique(), proContractPlandetail.getProplanUnique())) {
							proContractPlandetail.setGross(temDetail.getGross());
							proContractPlandetail.setSquare(temDetail.getSquare());
							proContractPlandetail.setUnitPrice(temDetail.getUnitPrice());
							proContractPlandetail.setPayNode(temDetail.getPayNode());
							proContractPlandetail.setFinished(temDetail.getFinished());
							hitSet.add(temDetail.getProplanUnique());
							break;
						}
					}
				}
			}
		}

		proContractPlandetailService.physicsDelete(proContract.getId());
		EntityWrapper<ProPlanDetail> ppdEw = new EntityWrapper<ProPlanDetail>();
		ppdEw.eq("consplit_id", proContract.getId());
		ppdEw.ne("is_worked", "1");
		ProPlanDetail ppde = new ProPlanDetail();
		ppde.setConsplitId("");
		proPlanDetailService.update(ppde, ppdEw);

		if (splitList != null && splitList.size() > 0) {
			proContractPlandetailService.insertBatch(splitList);
		}

		ProContract upPo = new ProContract();
		upPo.setId(proContract.getId());
		upPo.setSplitStatus("1");// 已拆分
		baseMapper.updateById(proContract);

		/**
		 * 更新生产计划详情consplit_id字段
		 */
		// 查询生产计划主表
		ProPlanInfo proPlanInfo = new ProPlanInfo();
		proPlanInfo.setEffStatus("1");// 已生效
		proPlanInfo.setProjectId(proContract.getProjectId());
		EntityWrapper<ProPlanInfo> proPlanEw = new EntityWrapper<ProPlanInfo>();
		proPlanEw.setEntity(proPlanInfo);
		ProPlanInfo proPlanInfoRes = proPlanInfoService.selectOne(proPlanEw);
		// 根据主表id更新详情表
		for (ProContractPlandetail pcpDetail : splitList) {
			EntityWrapper<ProPlanDetail> planDtailEw = new EntityWrapper<ProPlanDetail>();
			planDtailEw.eq("pro_id", proPlanInfoRes.getId());
			planDtailEw.eq("unique_id", pcpDetail.getProplanUnique());
//			planDtailEw.eq("leaf", "1");
			planDtailEw.eq("name_property", "检验批");
			ProPlanDetail upDetail = new ProPlanDetail();
			upDetail.setConsplitId(proContract.getId());
			proPlanDetailService.update(upDetail, planDtailEw);
		}
		// 取得被删除合同关联的行号，并取消原关联
//		temSet.removeAll(hitSet);
//		if(temSet!=null&&temSet.size()>0){
//			for (String uniqId : temSet) {
//				planDtailEw.eq("unique_id", uniqId);
//				planDtailEw.eq("leaf", "1");
//				ProPlanDetail upDetail = new ProPlanDetail();
//				upDetail.setConsplitId(null);
//				proPlanDetailService.update(upDetail, planDtailEw);
//			}
//		}
	}

	/**
	 * 合同拆分修改值保存
	 */
	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public void saveConSplitValue(ProContract proContract) {
		String proId = proContract.getId();
		proContractPlandetailService.physicsDelete(proId);

		List<ProContractPlandetail> detailList = proContract.getDetailList();
		if (detailList != null && detailList.size() > 0) {
			for (ProContractPlandetail proContractPlandetail : detailList) {
				proContractPlandetail.setConId(proId);
				proContractPlandetail.setProjectId(proContract.getProjectId());
			}
			proContractPlandetailService.insertBatch(detailList);
		}

	}

	/**
	 * 合同产值展示
	 */
	@Override
	public List<ProContractPlandetail> selectValue(ProContract proContract) {
		// 查询生产计划主表
		ProPlanInfo proPlanInfo = new ProPlanInfo();
		proPlanInfo.setEffStatus("1");// 已生效
		proPlanInfo.setProjectId(proContract.getProjectId());
		EntityWrapper<ProPlanInfo> proPlanEw = new EntityWrapper<ProPlanInfo>();
		proPlanEw.setEntity(proPlanInfo);
		ProPlanInfo proPlanInfoRes = proPlanInfoService.selectOne(proPlanEw);

		// 查询合同拆分详情
		EntityWrapper<ProContractPlandetail> pcpEw = new EntityWrapper<ProContractPlandetail>();
		pcpEw.eq("con_id", proContract.getId());
		List<ProContractPlandetail> pcpList = proContractPlandetailService.selectList(pcpEw);

		Map<String, ProContractPlandetail> obMap = Maps.newHashMap();
		Map<String, List<String>> map = Maps.newHashMap();
		// 将生产计划详情信息融入到合同拆分详情
		for (ProContractPlandetail proContractPlandetail : pcpList) {
			EntityWrapper<ProPlanDetail> ppdEw = new EntityWrapper<ProPlanDetail>();
			ppdEw.eq("pro_id", proPlanInfoRes.getId());
			ppdEw.eq("unique_id", proContractPlandetail.getProplanUnique());
			ProPlanDetail ppd = proPlanDetailService.selectOne(ppdEw);
//			proContractPlandetail.setPlanDetail(ppd);
			proContractPlandetail.setWbsName(ppd.getWbsName());
			proContractPlandetail.setNameProperty(ppd.getNameProperty());
			proContractPlandetail.setPlanBeginDate(ppd.getPlanBeginDate());
			proContractPlandetail.setPlanEndDate(ppd.getPlanEndDate());
			proContractPlandetail.setDuration(ppd.getDuration());
			proContractPlandetail.setQuantities(ppd.getQuantities());
			proContractPlandetail.setUnit(ppd.getUnit());
			proContractPlandetail.setParentId(ppd.getParentId());
			proContractPlandetail.setLeaf(ppd.getLeaf());
			obMap.put(proContractPlandetail.getProplanUnique(), proContractPlandetail);

			String parentId = ppd.getParentId();
			String uid = proContractPlandetail.getProplanUnique();
			if (map.containsKey(parentId)) {
				List<String> childList = map.get(parentId);
				childList.add(uid);
				map.put(parentId, childList);
			} else {
				List<String> childList = Lists.newArrayList();
				childList.add(uid);
				map.put(parentId, childList);
			}
		}

		// 递归，过滤
		Set<String> parentSet = Sets.newHashSet();
		Set<String> resSet = Sets.newHashSet();
		for (ProContractPlandetail proContractPlandetail : pcpList) {
			String uid = proContractPlandetail.getProplanUnique();
			String leaf = proContractPlandetail.getLeaf();
			String nameProperty = proContractPlandetail.getNameProperty();
			String finished = proContractPlandetail.getFinished();
			String parentId = proContractPlandetail.getParentId();
//			if(!Objects.equal(leaf, "1")||!Objects.equal(finished, "1")){
//				continue;
//			}
			if (!Objects.equal(nameProperty, "检验批") || !Objects.equal(finished, "1")) {
				continue;
			}
			parentSet.add(parentId);
			resSet.add(uid);
			getAllIds(uid, pcpList, map, resSet);
		}
		// 组合成结果list
		List<ProContractPlandetail> pcpResList = Lists.newArrayList();
		for (String uid : resSet) {
			if (obMap.get(uid) != null) {
				pcpResList.add(obMap.get(uid));
			}
		}

		// 计算父节点合同产值
		Map<String, List<ProContractPlandetail>> comListMap = Maps.newHashMap();
		Map<String, ProContractPlandetail> comObMap = Maps.newHashMap();
		for (ProContractPlandetail pcp : pcpResList) {
			String parentId = pcp.getParentId();
			String uid = pcp.getProplanUnique();
			comObMap.put(uid, pcp);

			if (comListMap.containsKey(parentId)) {
				List<ProContractPlandetail> childList = comListMap.get(parentId);
				childList.add(pcp);
				comListMap.put(parentId, childList);
			} else {
				List<ProContractPlandetail> childList = Lists.newArrayList();
				childList.add(pcp);
				comListMap.put(parentId, childList);
			}
		}
		getAllValue(parentSet, comListMap, comObMap);

		List<ProContractPlandetail> resList = Lists.newArrayList();
		for (String key : comObMap.keySet()) {
			resList.add(comObMap.get(key));
		}

		return resList;
	}

	private void getAllIds(String uid, List<ProContractPlandetail> pcpList, Map<String, List<String>> map,
			Set<String> resSet) {
		for (ProContractPlandetail proContractPlandetail : pcpList) {
			String parentId = proContractPlandetail.getParentId();
			if (StringUtils.isEmpty(parentId) || Objects.equal(parentId, "0")) {
				continue;
			} else if (map.get(parentId).contains(uid)) {
				resSet.add(parentId);
				getAllIds(parentId, pcpList, map, resSet);
			}
		}
	}

	private void getAllValue(Set<String> parentSet, Map<String, List<ProContractPlandetail>> comListMap,
			Map<String, ProContractPlandetail> obMap) {
		Set<String> pidSet = Sets.newHashSet();

		for (String key : comListMap.keySet()) {
			BigDecimal totalDuration = new BigDecimal(0);
			BigDecimal totalQuantities = new BigDecimal(0);
			BigDecimal tTotalPrice = new BigDecimal(0);

			List<ProContractPlandetail> childList = comListMap.get(key);
			for (ProContractPlandetail childPcp : childList) {
				if (parentSet.contains(childPcp.getProplanUnique())) {
					pidSet.add(key);
				}

				BigDecimal gross = childPcp.getGross() == null ? new BigDecimal(0) : childPcp.getGross();
				BigDecimal duration = childPcp.getDuration() == null ? new BigDecimal(0) : childPcp.getDuration();
				BigDecimal quantities = childPcp.getQuantities() == null ? new BigDecimal(0) : childPcp.getQuantities();
				BigDecimal totalPrice = childPcp.getTotalPrice() == null ? new BigDecimal(0) : childPcp.getTotalPrice();
				totalDuration = totalDuration.add(duration);
				totalQuantities = totalQuantities.add(quantities);
				tTotalPrice = tTotalPrice.add(totalPrice);
			}
			if (parentSet.contains(key)) {
				if (!Objects.equal(key, "0")) {
					ProContractPlandetail temOb = obMap.get(key);
					temOb.setTotalPrice(tTotalPrice);
					temOb.setQuantities(totalQuantities);
					temOb.setDuration(totalDuration);
					obMap.put(key, temOb);
				}
			}
//			obMap.put(key, obMap.get(key).setTotalPrice(tTotalPrice));
		}

		if (pidSet.size() > 0) {
			getAllValue(pidSet, comListMap, obMap);
		}
	}

	/**
	 * 提交审核，远程调用创建activity工作流实例
	 * 
	 * @param proContract(id)
	 */
	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public void submit(ProContract proContract) {
		ProContract info = baseMapper.selectById(proContract.getId());

		// 如果流程存在且未完成
		if (!StringUtils.isEmpty(info.getActivityinsId()) && Objects.equal(info.getCheckStatus(), "0")
				&& Objects.equal(info.getReturnStatus(), "0")) {
			// 完成节点
			TaskIdMapPojo tmp = new TaskIdMapPojo();
			tmp.setUserId(ShiroUtils.getUserId());
			Map<String, Object> localMap = Maps.newHashMap();
			localMap.put("oper", ActivityConstant.TaskOperType.ACT_TASKOPER_SUBMIT.value);
			tmp.setLocalMap(localMap);
			activityService.completeTaskByInsId(info.getActivityinsId(), tmp);

			if (!StringUtils.isEmpty(info.getActivityinsId())) {
				ProContract upInfo = new ProContract();
				upInfo.setId(proContract.getId());
				upInfo.setActivityinsId(info.getActivityinsId());
				upInfo.setCheckStatus("1");// 审核中
				upInfo.setReturnStatus("0");// 未弃审
				baseMapper.updateById(upInfo);
			}
		} else if ((StringUtils.isEmpty(info.getActivityinsId()) || Objects.equal(info.getReturnStatus(), "1"))
				&& Objects.equal(info.getCheckStatus(), "0")) {// 如果流程不存在或流程已弃审
			TaskIdMapPojo tmp = new TaskIdMapPojo();
			tmp.setInsKey(ActivityConstant.ProcessKey.ACT_DEF_PRO_CON.value);// 流程定义key
			tmp.setUserId(ShiroUtils.getUserId());

			Map<String, Object> localMap = Maps.newHashMap();
			localMap.put("oper", ActivityConstant.TaskOperType.ACT_TASKOPER_SUBMIT.value);
			tmp.setLocalMap(localMap);

			Map<String, Object> map = Maps.newHashMap();
			map.put(ActivityConstant.VariableKey.ACT_VAR_SUBMITER.value, ShiroUtils.getUserId());
			map.put(ActivityConstant.VariableKey.ACT_VAR_BILLCODE.value, proContract.getId());
			map.put(ActivityConstant.VariableKey.ACT_VAR_BILLTYPE.value,
					ActivityConstant.BillType.ACT_BILL_PRO_CON.value + ":" + info.getConType());
			map.put(ActivityConstant.VariableKey.ACT_VAR_PROJECTNAME.value, info.getProjectName());
			tmp.setMap(map);
			String activityInsId = activityService.startAndComplete(tmp);

			if (!StringUtils.isEmpty(activityInsId)) {
				ProContract upInfo = new ProContract();
				upInfo.setId(proContract.getId());
				upInfo.setActivityinsId(activityInsId);
				upInfo.setCheckStatus("1");// 审核中
				upInfo.setReturnStatus("0");// 未弃审
				baseMapper.updateById(upInfo);
			}
		}
	}

	/**
	 * 管理员审核通过操作
	 */
	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public void check(ProContract proContract) {
		TaskIdMapPojo taskPojo = new TaskIdMapPojo();
		taskPojo.setTaskId(proContract.getTaskId());
		taskPojo.setComment(proContract.getComment());
		taskPojo.setUserId(ShiroUtils.getUserId());

		Map<String, Object> localMap = Maps.newHashMap();
		localMap.put("oper", ActivityConstant.TaskOperType.ACT_TASKOPER_PASS.value);
		taskPojo.setLocalMap(localMap);
		activityService.completeTaskByTaskIdAndMap(taskPojo);

		ProcessInstance pi = activityService.queryProcessInstance(proContract.getActivityinsId());
		// 流程结束
		if (pi == null) {
			// 修改单据状态为审核通过
			ProContract upInfo = new ProContract();
			upInfo.setId(proContract.getId());
			upInfo.setCheckStatus("2");// 审核通过
//			upInfo.setEffStatus("1");//已生效
			upInfo.setCheckFinTime(new Date());
			baseMapper.updateById(upInfo);
		}
	}

	/**
	 * 管理员审核驳回操作
	 */
	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public void reject(ProContract proContract) {
		// 工作流驳回
		TaskIdMapPojo taskPojo = new TaskIdMapPojo();
		taskPojo.setTaskId(proContract.getTaskId());
		taskPojo.setComment(proContract.getComment());
		taskPojo.setUserId(ShiroUtils.getUserId());

//		Map<String,Object> localMap = Maps.newHashMap();
//		localMap.put("oper", ActivityConstant.TaskOperType.ACT_TASKOPER_REJECT.value);
//		taskPojo.setLocalMap(localMap);

		boolean isReturnSubmit = activityService.backProcess(taskPojo);
		if (isReturnSubmit) {
			// 修改单据状态为自由态
			ProContract upInfo = new ProContract();
			upInfo.setId(proContract.getId());
			upInfo.setCheckStatus("0");// 自由态
			baseMapper.updateById(upInfo);
		}
	}

	/**
	 * 弃审操作
	 */
	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public void endReturn(ProContract proContract) {
		ProcessInstance ins = activityService.findProcessInstance(proContract.getActivityinsId());
		if (ins == null) {// 表示流程结束
			// 修改单据状态为自由态，已弃审
			ProContract upInfo = new ProContract();
			upInfo.setId(proContract.getId());
			upInfo.setCheckStatus("0");// 自由态
			upInfo.setReturnStatus("1");// 已弃审
			baseMapper.updateById(upInfo);
		}
	}

	@Override
	public PageUtils selectConList(Map<String, Object> params, String companyId) {

		Query<ProContract> query = new Query<ProContract>(params);
		Page<ProContract> page = query.getPage();

		// 1、根据项目查询记录，分页；
		String projectId = MapUtil.getStr(params, "projectId");
		String conType = MapUtil.getStr(params, "conType");
		String conName = MapUtil.getStr(params, "conName");
		String partb = MapUtil.getStr(params, "partb");
		String keywords = MapUtil.getStr(params, "keywords");
		Map<String, Object> map = Maps.newHashMap();
		map.put("companyId", companyId);// MapUtil.getStr(params,"companyId")
		map.put("projectId", projectId);
		map.put("conType", conType);
		map.put("conName", conName);
		map.put("partb", partb);
		map.put("keywords", keywords);
		List<ProContract> proCont = baseMapper.selectConList(page, map);
		if (proCont == null || proCont.size() == 0) {
			return new PageUtils(page);
		}

		// 2、填充数据：已完成产值、已完成工程量、
		getProContinfoList(proCont);

		page.setRecords(proCont);
		return new PageUtils(page);
	}

	private List<ProContract> getProContinfoList(List<ProContract> proCont) {

		List<String> contList = new ArrayList<String>();
		for (ProContract proContract : proCont) {
			contList.add(proContract.getId());
		}

		List<ProContract> proContList = baseMapper.getWorkOrderInfoByCon(contList);
		Map<String, Double> workRecordMap = getWorkRecordDaysByCon(contList);

		Map<String, ProContract> contMap = new HashMap<String, ProContract>();
		for (ProContract proContract : proContList) {
			contMap.put(proContract.getId(), proContract);
		}

		for (ProContract proContract : proCont) {
			if (contMap.containsKey(proContract.getId())) {
				ProContract mapCont = contMap.get(proContract.getId());

				if (mapCont != null) {
					proContract.setFinishproNum(mapCont.getFinishproNum());
					proContract.setFinishValue(mapCont.getFinishValue());
				}
				if (workRecordMap.get(proContract.getId()) != null)
					proContract.setRecordDays(workRecordMap.get(proContract.getId()));

				proContract
						.setActrecordDays(MathUtil.divide(proContract.getFinishValue(), proContract.getFinishproNum()));
			}
		}

		return proCont;
	}

	private Map<String, Double> getWorkRecordDaysByCon(List<String> contList) {

		Map<String, Double> rtnMap = new HashMap<String, Double>();
		List<ProContract> workDays = baseMapper.getWorkRecordDaysByCon(contList);
		if (workDays == null || workDays.size() == 0) {
			return rtnMap;
		}

		for (ProContract proContract : workDays) {

			rtnMap.put(proContract.getId(), proContract.getRecordDays());
		}

		return rtnMap;
	}

	/**
	 * 钢筋班组首页：2、根据项目查询单项数据
	 * 
	 * @param params
	 * @return
	 */
	@Override
	public List<Map<String, Object>> getItemValueByPro(Map<String, Object> params) {

		List<Map<String, Object>> thisList = baseMapper.getItemValueByPro(params);

		return thisList;

	}

	@Override
	public Map<String, Object> getItemValue(Map<String, Object> params) {

		NumberFormat nf = NumberFormat.getNumberInstance();
		nf.setMaximumFractionDigits(2);

		Map<String, Object> maps = Maps.newHashMap();
		HashMap<String, Object> itemValue = baseMapper.getItemValue(params);
		// 获取已完成的任务单数量
		Integer workorderNum = Integer.parseInt(itemValue.get("workorderNum") + "");
		if (itemValue.get("finishValue") == null) {
			maps.put("finishValue", 0);
		} else {
			try {
				Double finish = Double.parseDouble(itemValue.get("finishValue") + "");
				maps.put("finishValue", nf.format(finish));
			} catch (Exception e) {
				maps.put("finishValue", 0);
			}

		}
		maps.put("workRecord", itemValue.get("workRecord"));
		if (workorderNum == null || workorderNum == 0) {
			maps.put("workorderNum", 0);
			// 整改率
			maps.put("modifyRate", 0);
			// 整改完成率
			maps.put("finishRate", 0);
			return maps;
		}
		List<BsRectificationEntity> bsRectificationList = baseMapper.findBsRectification(params);
		if (CollectionUtil.isEmpty(bsRectificationList)) {
			maps.put("workorderNum", workorderNum);
			// 整改率
			maps.put("modifyRate", 0);
			// 整改完成率
			maps.put("finishRate", 0);
			return maps;
		}
		// 以任务单ID 为key 组装整改信息
		Map<String, List<BsRectificationEntity>> map = Maps.newHashMap();
		for (BsRectificationEntity bs : bsRectificationList) {
			// 如果任务ID 存在
			if (map.containsKey(bs.getTaskId())) {
				List<BsRectificationEntity> li = map.get(bs.getTaskId());
				li.add(bs);
				map.put(bs.getTaskId(), li);
			} else {
				List<BsRectificationEntity> li = new ArrayList<BsRectificationEntity>();
				li.add(bs);
				map.put(bs.getTaskId(), li);
			}
		}
		Integer modify = 0;// 获取整改完成的数据
		Integer finish = 0;// 获取整改中的数据
		// 遍历 整改信息 MAP 获取数据
		for (Map.Entry<String, List<BsRectificationEntity>> entry : map.entrySet()) {
			List<BsRectificationEntity> lis = entry.getValue();
			// 整改信息是按升序排列 第一个为最小值
			if ("1".equals(lis.get(0).getDealStatus()) && "5".equals(lis.get(0).getWorkStatus())) {
				modify += 1;
			} else {
				finish += 1;
			}
		}

		// 整改率
		maps.put("modifyRate", nf.format((modify + finish) / workorderNum));
		// 整改完成率
		maps.put("finishRate", nf.format(modify / workorderNum));

		return maps;
	}

	@Override
	public Map<String, Object> getItemValueProperty(Map<String, Object> params) {
		HashMap<String, Object> itemValue = baseMapper.getItemValue(params);
		if (itemValue.get("finishValue") == null) {
			itemValue.put("finishValue", 0);
		}
		return itemValue;
	}

}
