package com.build.cloud.modules.productplan.service.impl;

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import cn.hutool.core.util.StrUtil;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.baomidou.mybatisplus.service.impl.ServiceImpl;
import com.beust.jcommander.internal.Sets;
import com.build.cloud.common.exception.BusinessException;
import com.build.cloud.common.utils.PageUtils;
import com.build.cloud.common.utils.Query;
import com.build.cloud.modules.bs.entity.BsWorkerEntity;
import com.build.cloud.modules.bs.service.IBsWorkerService;
import com.build.cloud.modules.productplan.dao.ProWorkOrderDao;
import com.build.cloud.modules.productplan.dto.ProContract;
import com.build.cloud.modules.productplan.dto.ProContractPlandetail;
import com.build.cloud.modules.productplan.dto.ProPlanDetail;
import com.build.cloud.modules.productplan.dto.ProPlanInfo;
import com.build.cloud.modules.productplan.dto.ProWorkOrderEntity;
import com.build.cloud.modules.productplan.form.ProWorkOrderForm;
import com.build.cloud.modules.productplan.form.TaskListForm;
import com.build.cloud.modules.productplan.service.IProContractPlandetailService;
import com.build.cloud.modules.productplan.service.IProContractService;
import com.build.cloud.modules.productplan.service.IProPlanDetailService;
import com.build.cloud.modules.productplan.service.IProPlanInfoService;
import com.build.cloud.modules.productplan.service.IProRotaService;
import com.build.cloud.modules.productplan.service.IProWorkOrderService;
import com.build.cloud.modules.sys.entity.SysEmployeeEntity;
import com.build.cloud.modules.sys.service.ISysEmployeeService;
import com.build.cloud.modules.sys.shiro.ShiroUtils;

/**
 * 
* Title: ProWorkOrderServiceImpl
* Description:  任务单
* @author 鲁四围 
* @date 2018年4月24日
 */
@Service("proWorkOrderService")
public class ProWorkOrderServiceImpl  extends ServiceImpl<ProWorkOrderDao, ProWorkOrderEntity> implements IProWorkOrderService{
	
	@Autowired
	private IProPlanDetailService proPlanDetailService;	//生产计划
	@Autowired
	private IProPlanInfoService proPlanInfoService;	//生产计划
	@Autowired
	private IProContractService proContractService;	//合同
	@Autowired
	private IProContractPlandetailService proContractPlandetailService;
	@Autowired
	private IProRotaService proRotaService; //花名册
	@Autowired
	private ISysEmployeeService sysEmployeeService;
	@Autowired
	private IBsWorkerService bsWorkerService;
	
	@Override
	public PageUtils queryPage(Map<String, Object> params) {
		Query<ProWorkOrderForm> query = new Query<ProWorkOrderForm>(params);
		Page<ProWorkOrderForm> page = query.getPage();
		List<ProWorkOrderForm> records = baseMapper.selectPageByFrom(page, query);
		for (ProWorkOrderForm proWorkOrderForm : records) {
			String userId = proWorkOrderForm.getInitailBy();
			EntityWrapper<BsWorkerEntity> workEw = new EntityWrapper<>();
			workEw.eq("user_id", userId);
			List<BsWorkerEntity> workList = bsWorkerService.selectList(workEw);
			if(workList!=null&&workList.size()>0){
				proWorkOrderForm.setInitailName(workList.get(0).getName());
			}else{
				EntityWrapper<SysEmployeeEntity> employEw = new EntityWrapper<>();
				employEw.eq("user_id", userId);
				List<SysEmployeeEntity> employList = sysEmployeeService.selectList(employEw);
				if(employList!=null&&employList.size()>0){
					proWorkOrderForm.setInitailName(employList.get(0).getEmpName());
				}
			}
			//合同类型
			String conId = proWorkOrderForm.getConsplitId();
			ProContract contract = proContractService.selectById(conId);
			proWorkOrderForm.setConType(contract.getConType());
			//合同平米含量
			EntityWrapper<ProContractPlandetail> conDetailEw = new EntityWrapper<>();
			conDetailEw.eq("con_id", conId);
			conDetailEw.eq("proplan_unique", proWorkOrderForm.getProplanUnique());
			ProContractPlandetail conDetail = proContractPlandetailService.selectOne(conDetailEw);
			if(conDetail!=null){
				proWorkOrderForm.setGross(conDetail.getGross());
			}
			//验收人查询
			String names = "";
			
			String acceptorIds = proWorkOrderForm.getAcceptorIds();
			if(StrUtil.isNotBlank(acceptorIds)){
				EntityWrapper<BsWorkerEntity> acceptWorkEw = new EntityWrapper<>();
				acceptWorkEw.in("user_id", acceptorIds);
				List<BsWorkerEntity> acceptWorkList = bsWorkerService.selectList(acceptWorkEw);
				if(acceptWorkList!=null&&acceptWorkList.size()>0){
					int x = 0;
					for (BsWorkerEntity bsWorkerEntity : acceptWorkList) {
						if(x>0){
							names = names + "," + bsWorkerEntity.getName();
						}else{
							names = bsWorkerEntity.getName();
						}
						x++;
					}
				}else{
					EntityWrapper<SysEmployeeEntity> acceptEmployEw = new EntityWrapper<>();
					acceptEmployEw.in("user_id", acceptorIds);
					List<SysEmployeeEntity> acceptEmployList = sysEmployeeService.selectList(acceptEmployEw);
					if(acceptEmployList!=null&&acceptEmployList.size()>0){
						int y = 0;
						for (SysEmployeeEntity sysEmployeeEntity : acceptEmployList) {
							if(y>0){
								names = names + "," + sysEmployeeEntity.getEmpName();
							}else{
								names = sysEmployeeEntity.getEmpName();
							}
							y++;
							
						}
					}
				}
				proWorkOrderForm.setAcceptorNames(names);
			}
		}
		page.setRecords(records);
//		page.setTotal(baseMapper.selectByCount(params));		
		return new PageUtils(page);
		
		
	}
	
	/**
	 * 添加
	 */
	@Override
	@Transactional(propagation=Propagation.REQUIRED)
	public void workSave(TaskListForm form) throws Exception{
		//查已生效的生产计划主表
		EntityWrapper<ProPlanInfo> ppiEw = new EntityWrapper<ProPlanInfo>();
		ppiEw.eq("project_id", form.getProjectId());
		ppiEw.eq("eff_status", "1");
		ProPlanInfo ppi = proPlanInfoService.selectOne(ppiEw);
		
		Set<String> set = Sets.newHashSet();
		for(String proplanUnique:form.getProplanUniques()) {
			EntityWrapper<ProPlanDetail> ew = new EntityWrapper<ProPlanDetail>();
			ew.eq("unique_id", proplanUnique);
			ew.eq("pro_id", ppi.getId());
			ProPlanDetail ent = proPlanDetailService.selectOne(ew);
			ProContract conEnt = proContractService.selectById(ent.getConsplitId());
			
			EntityWrapper<ProContractPlandetail> conDetailEw = new EntityWrapper<ProContractPlandetail>();
			conDetailEw.eq("proplan_unique", proplanUnique);
			conDetailEw.eq("con_id", conEnt.getId());
			ProContractPlandetail conDetail = proContractPlandetailService.selectOne(conDetailEw);
			if(conDetail==null||conDetail.getGross()==null){
				throw new Exception("任务单对应的合同拆分工程量不能为空");
			}
			
//			EntityWrapper<ProRota> roEw = new EntityWrapper<ProRota>();
//			roEw.eq("contract_id", conEnt.getId());
//			roEw.eq("project_id", form.getProjectId());
//			ProRota rotaEnt = proRotaService.selectOne(roEw);
			
			ProWorkOrderEntity workEnt = new ProWorkOrderEntity();
			workEnt.setProplanUnique(proplanUnique);
			workEnt.setConsplitId(conEnt.getId());
			workEnt.setProjectId(form.getProjectId());
			workEnt.setWorkContent(ent.getWbsName());
			workEnt.setPlanBenginDate(ent.getPlanBeginDate());
			workEnt.setActBeginDate(ent.getPlanBeginDate());
			workEnt.setPlanEndDate(ent.getPlanEndDate());
			workEnt.setDuration(ent.getDuration());
			workEnt.setInitailBy(ShiroUtils.getUserId());
			workEnt.setDutyBy(conEnt.getDutyId());
			workEnt.setSendDate(new Date());	
//			if(rotaEnt!=null){
//				workEnt.setGroupBy(rotaEnt.getTeamId());
//			}
			//拼接任务单名称
			String parentIds = ent.getParentIds();
			if(StrUtil.isNotBlank(parentIds)){
				EntityWrapper<ProPlanDetail> parentEw = new EntityWrapper<ProPlanDetail>();
				parentEw.in("unique_id", parentIds);
				parentEw.eq("pro_id", ppi.getId());
				List<ProPlanDetail> parentDetails = proPlanDetailService.selectList(parentEw);
				if(parentDetails!=null&&parentDetails.size()>0){
					int i = 0;
					String wbsNames = "";
					for (ProPlanDetail proPlanDetail : parentDetails) {
						if(i==0){
							wbsNames = wbsNames + proPlanDetail.getWbsName();
						}else{
							wbsNames = wbsNames + "/" + proPlanDetail.getWbsName();
						}
						i++;
					}
					workEnt.setWorkName(wbsNames+"/"+ent.getWbsName());
					workEnt.setWorkContent(wbsNames+"/"+ent.getWbsName());
				}else{
					workEnt.setWorkName(ent.getWbsName());
					workEnt.setWorkContent(ent.getWbsName());
				}
			}else{
				workEnt.setWorkName(ent.getWbsName());
				workEnt.setWorkContent(ent.getWbsName());
			}
			
			baseMapper.insert(workEnt);
			
			ProPlanDetail upPpd = new ProPlanDetail();
			upPpd.setIsWorked("1");
			upPpd.setActBeginDate(new Date());
			proPlanDetailService.update(upPpd, ew);
			
			if(StrUtil.isNotBlank(parentIds)){
				CollectionUtils.addAll(set, parentIds.split(","));
			}
		}
		
		//修改父节点实际开始时间
		if(set!=null&&set.size()>0){
			for (String uniqueId : set) {
				EntityWrapper<ProPlanDetail> uEw = new EntityWrapper<ProPlanDetail>();
				uEw.eq("unique_id", uniqueId);
				uEw.eq("pro_id", ppi.getId());
				ProPlanDetail uppd = proPlanDetailService.selectOne(uEw);
				if(uppd!=null&&uppd.getActBeginDate()==null){
					ProPlanDetail actUp = new ProPlanDetail();
					actUp.setActBeginDate(new Date());
					proPlanDetailService.update(actUp, uEw);
				}
			}
		}
	}

	@Override
	@Transactional(propagation=Propagation.REQUIRED)
	public void cancelWork(String id) throws BusinessException{
		ProWorkOrderEntity ent = this.selectById(id);
		if("1".equals(ent.getWorkStatus())||"2".equals(ent.getWorkStatus())) {
			this.deleteById(id);
			//查询当前生效的生产计划
			EntityWrapper<ProPlanInfo> ppiEw = new EntityWrapper<ProPlanInfo>();
			ppiEw.eq("project_id", ent.getProjectId());
			ppiEw.eq("eff_status", "1");
			ProPlanInfo ppi = proPlanInfoService.selectOne(ppiEw);
			//修改生产计划详情对应行的是否已发任务单状态
			EntityWrapper<ProPlanDetail> detailEw = new EntityWrapper<ProPlanDetail>();
			detailEw.eq("unique_id", ent.getProplanUnique());
			detailEw.eq("pro_id", ppi.getId());
			ProPlanDetail ppd = new ProPlanDetail();
			ppd.setIsWorked("0");
			proPlanDetailService.update(ppd, detailEw);
		}else {
			throw new BusinessException("只能对  待开始、进行中  的任务单作废!");
		}
	}
	
	public static void main(String[] args) {
		Set<String> set = Sets.newHashSet();
		CollectionUtils.addAll(set, "2,2,3".split(","));
		for (String object : set) {
			System.out.println(object);
		}
	}
}
