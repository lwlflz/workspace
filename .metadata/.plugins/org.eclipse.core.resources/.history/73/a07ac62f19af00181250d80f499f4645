package com.build.cloud.modules.sys.controller;
import java.util.List;
import java.util.Map;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.build.cloud.common.utils.PageUtils;
import com.build.cloud.common.utils.StringUtil;
import com.build.cloud.common.validator.ValidatorUtils;
import com.build.cloud.core.base.controller.AbstractController;
import com.build.cloud.core.base.controller.Result;
import com.build.cloud.modules.sys.entity.SysCompanyEntity;
import com.build.cloud.modules.sys.entity.SysEmployeeEntity;
import com.build.cloud.modules.sys.entity.SysUserRoleEntity;
import com.build.cloud.modules.sys.service.ISysCompanyService;
import com.build.cloud.modules.sys.service.ISysEmployeeService;
import com.build.cloud.modules.sys.service.ISysUserRoleService;
import com.google.common.collect.Maps;

import cn.hutool.core.collection.CollectionUtil;
import cn.hutool.core.util.PinyinUtil;
import cn.hutool.core.util.StrUtil;
/**
 * @ClassName: CompanyController
 * @Description: 公司表
 * @author: liutao
 * @date: 2018年3月30日 下午3:29:01
 */
@RestController
@RequestMapping("sys/company")
public class SysCompanyController extends AbstractController {
	@Autowired
	private ISysCompanyService sysCompanyService;
	@Autowired
	private ISysEmployeeService sysEmployeeService;
	@Autowired
	private ISysUserRoleService sysUserRoleService;
	/**
	 * 列表
	 */
	@RequestMapping("/v1/list")
	@RequiresPermissions("sys:company:list")
	public Result list(@RequestParam Map<String, Object> params) {
		params.put("corpCode", getUser().getCorpCode());// 获取当前登陆人员归属集团CODE
		PageUtils page = sysCompanyService.queryPage(params);
		return Result.ok().put(page);
	}
	/**
	 * 信息
	 */
	@RequestMapping("/v1/info")
	@RequiresPermissions("sys:company:info")
	public Result info(String id) {
		SysCompanyEntity company = sysCompanyService.selectById(id);
		return Result.ok().putEntity(company);
	}
	/**
	 * 保存
	 */
	@RequestMapping("/v1/save")
	@RequiresPermissions("sys:company:save")
	public Result save(@RequestBody SysCompanyEntity company) { //
		ValidatorUtils.validateEntity(company);
		// 前端传递状态参数是空字符串 做空字符串判断 如果是空字符串默认转成0
		if (StrUtil.isBlank(company.getStatus())) {
			company.setStatus("0");
		}
		
		EntityWrapper<SysCompanyEntity> ew = new EntityWrapper<SysCompanyEntity>();
		ew.eq("company_code", company.getCompanyCode());
		ew.eq("corp_code", getUser().getCorpCode());
		int count = sysCompanyService.selectCount(ew);
		if (count > 0) {
			return Result.error("公司编码已存在");
		}
		EntityWrapper<SysCompanyEntity> ewNema = new EntityWrapper<SysCompanyEntity>();
		ewNema.eq("company_name", company.getCompanyName());
		ewNema.eq("corp_code", getUser().getCorpCode());
		int countName = sysCompanyService.selectCount(ewNema);
		if (countName > 0) {
			return Result.error("公司名称已存在");
		}
		SysCompanyEntity companyEntity = sysCompanyService.selectById(company.getParentId());
		if (StrUtil.isNotBlank(companyEntity.getParentCodes()) && !companyEntity.getParentCodes().equals("0")) {
			company.setParentCodes(companyEntity.getParentCodes() + "," + company.getParentId());
		} else {
			company.setParentCodes(company.getParentId());
		}
		company.setPinyinCode(PinyinUtil.getAllFirstLetter(company.getCompanyName()));
		company.setCorpCode(getUser().getCorpCode());// 获取当前登陆人员归属集团CODE
		company.setCorpName(getUser().getCorpName());// 获取当前登陆人员归属集团名称
		company.setCreateBy(getUser().getLoginName());
		sysCompanyService.insert(company);
		return Result.ok();
	}
	/**
	 * 修改
	 */
	@PostMapping("/v1/update")
	@RequiresPermissions("sys:company:update")
	public Result update(@RequestBody SysCompanyEntity company) {
		ValidatorUtils.validateEntity(company);
		Map<String, Object> map = Maps.newHashMap();
		map.put("corpCode", getCorpCode());
		map.put("companyId", company.getId());
		SysCompanyEntity companyCurrent = sysCompanyService.selectById(company.getId());
		if(!company.getParentId().equals(companyCurrent.getParentId())){
			List<SysCompanyEntity> companyChildList = sysCompanyService.getCompanyChild(map);
			if(companyChildList.size() > 0) {
				return Result.error("如要变更上级公司，请先移除子公司再进行操作");
			}
		}
		if ((company.getParentId()).equals(company.getId())) {
			return Result.error("上级公司不能是自己");
		}
		EntityWrapper<SysCompanyEntity> ew = new EntityWrapper<SysCompanyEntity>();
		ew.eq("company_code", company.getCompanyCode());
		ew.eq("corp_code", getCorpCode());
		ew.ne("id", company.getId());
		int count = sysCompanyService.selectCount(ew);
		if (count > 0) {
			return Result.error("公司编码已存在");
		}
		EntityWrapper<SysCompanyEntity> ewNema = new EntityWrapper<SysCompanyEntity>();
		ewNema.eq("company_name", company.getCompanyName());
		ewNema.eq("corp_code", getCorpCode());
		ewNema.ne("id", company.getId());
		int countName = sysCompanyService.selectCount(ewNema);
		if (countName > 0) {
			return Result.error("公司名称已存在");
		}
		
		if ("0".equals(company.getStatus())) {
			if (isSequestrationTotow(company.getParentId())) {
				return Result.error("上级公司为封存状态，下级公司不能解封！");
			}
		} else {
			if (isSequestration(company.getId())) {
				return Result.error("请先将所有子公司封存之后再封存当前公司！");
			}
		}
		company.setPinyinCode(PinyinUtil.getAllFirstLetter(company.getCompanyName()));
		SysCompanyEntity companyEntity = sysCompanyService.selectById(company.getParentId());
		if(companyEntity != null ) {
			if (StrUtil.isNotBlank(companyEntity.getParentCodes()) && !companyEntity.getParentCodes().equals("0")) {
				company.setParentCodes(companyEntity.getParentCodes() + "," + company.getParentId());
			} else {
				company.setParentCodes(company.getParentId());
			}
		}
		if(company.getParentId().equals("0")) {
			company.setParentId(null);
		}
		sysCompanyService.updateById(company);
		return Result.ok();
	}
	/**
	 * 鲁四围 Title: isSequestration Description: 判断下级公司是否封存
	 * @param companyId
	 * @return
	 */
	private boolean isSequestration(String companyId) {
		EntityWrapper<SysCompanyEntity> ew = new EntityWrapper<SysCompanyEntity>();
		ew.eq("parent_id", companyId);
		List<SysCompanyEntity> entList = sysCompanyService.selectList(ew);
		if (CollectionUtil.isNotEmpty(entList)) {
			for (SysCompanyEntity ent : entList) {
				if ("0".equals(ent.getStatus())) {
					return true;
				}
//				isSequestration(ent.getId());
			}
		}
		return false;
	}
	/**
	 * 鲁四围 Title: isSequestrationTotow Description: 判断上级公司是否封存
	 * @param parentId
	 * @return
	 */
	private boolean isSequestrationTotow(String parentId) {
		SysCompanyEntity ent = sysCompanyService.selectById(parentId);
		if (ent == null || "0".equals(ent.getStatus())) {
			return false;
		}
		return true;
	}
	/**
	 * 删除
	 */
	@RequestMapping("/v1/delete")
	@RequiresPermissions("sys:company:delete")
	public Result delete(@RequestBody String id) {
		id = getDelId(id);
		if (StrUtil.isEmpty(id)) {
			return Result.error("ID不能为空");
		}
		SysCompanyEntity company = sysCompanyService.selectById(id);
		if (company.getParentId().equals("0")) {
			return Result.error("根节点公司不能删除");
		}
		EntityWrapper<SysCompanyEntity> ew = new EntityWrapper<SysCompanyEntity>();
		ew.eq("parent_id", id);
		int cout = sysCompanyService.selectCount(ew);
		if (cout > 0) {
			return Result.error("请先删除子公司后再删除当前公司");
		}
		EntityWrapper<SysEmployeeEntity> empEw = new EntityWrapper<SysEmployeeEntity>();
		empEw.eq("company_id", id);
		int empCout = sysEmployeeService.selectCount(empEw);
		if (empCout > 0) {
			return Result.error("请先删除公司下面的人员之前先删除公司人员");
		}
		EntityWrapper<SysUserRoleEntity> roleEw = new EntityWrapper<SysUserRoleEntity>();
		roleEw.eq("company_id", id);
		int roleCout = sysUserRoleService.selectCount(roleEw);
		if (roleCout > 0) {
			return Result.error("删除公司前请先删除角色公司数据");
		}
		sysCompanyService.deleteById(id);
		return Result.ok();
	}
	
	@RequestMapping("/v1/getComTree")
	public Result getComTree(@RequestParam(required = false) String mark) {
		EntityWrapper<SysCompanyEntity> ew = new EntityWrapper<SysCompanyEntity>();
		ew.eq("corp_code", getCorpCode());
		//如果标志为0 则调取全部公司数据,如标志未传则获取当前登录选择的公司以及它的下属公司
		if (StrUtil.isNotEmpty(mark) && mark.equals("0")) {
			List<SysCompanyEntity> list = sysCompanyService.selectList(ew);
			if(!CollectionUtil.isEmpty(list)) {//判断集合数据是否为空,不为空则查询父级公司名称
				setParentName(list);
			}
			return Result.ok().put(list);
		}
		if (StrUtil.isNotEmpty(mark) && mark.equals("2")) {
			List<SysCompanyEntity> list = sysCompanyService.selectList(new EntityWrapper<SysCompanyEntity>().eq("valid", "0").eq("status", "0"));
			if(!CollectionUtil.isEmpty(list)) {//判断集合数据是否为空,不为空则查询父级公司名称
				setParentName(list);
			}
			return Result.ok().put(list);
		}
		ew.eq("id", getCurrentCompanyId());
		List<SysCompanyEntity> list = sysCompanyService.selectList(ew);
		if (CollectionUtil.isNotEmpty(list)) {//判断集合数据是否为空,不为空则查询父级公司名称
			setParentName(list);
			list.get(0).setParentId("0");
		}
		Map<String, Object> map = Maps.newHashMap();
		map.put("corpCode", getCorpCode());
		map.put("companyId", getCurrentCompanyId());
		List<SysCompanyEntity> companyChildList = sysCompanyService.getCompanyChild(map);
		if(!CollectionUtil.isEmpty(companyChildList)) {//判断集合数据是否为空,不为空则查询父级公司名称
			setParentName(companyChildList);
		}
		list.addAll(companyChildList);
		return Result.ok().put(list);
	}
	
	@RequestMapping(value="/v1/getComByName")
	public Result searchCompanyByName(@RequestParam(required = false) String companyName) {
		if(StringUtil.isNotBlank(companyName)) {
			System.out.println("companyName = " + companyName);
			List<SysCompanyEntity> companyByName = sysCompanyService.getCompanyByName(companyName);
			return Result.ok().putList(companyByName);
		}else {
			Result.ok();
			return Result.error("公司名称为空");
		}
	}
	
	/**
	 * 设置上级公司的中文名称
	 * @param list
	 */
	private void setParentName(List<SysCompanyEntity> list){
		if(!CollectionUtil.isEmpty(list)) {//判断集合数据是否为空,不为空则查询父级公司名称
			for (SysCompanyEntity sysCompanyEntity : list) {
				if(!sysCompanyEntity.getParentId().equals("0")) {//当前获取到的公司上级为0则不处理 如果不为0则获取当前获取到的公司上级名称
					SysCompanyEntity company = sysCompanyService.selectById(sysCompanyEntity.getParentId());
					if(company != null) {
						sysCompanyEntity.setParentName(company.getCompanyName());
					}
					
				}
			}
			
		}
	}
}
