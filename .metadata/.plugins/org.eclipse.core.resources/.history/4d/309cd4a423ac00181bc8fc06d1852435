package com.build.cloud.modules.bs.controller;

import java.util.Map;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.build.cloud.common.utils.PageUtils;
import com.build.cloud.common.utils.StringUtil;
import com.build.cloud.core.base.controller.Result;
import com.build.cloud.common.validator.ValidatorUtils;
import com.build.cloud.core.base.controller.AbstractController;
import com.build.cloud.modules.bs.entity.BsBussinessEntity;
import com.build.cloud.modules.bs.service.IBsBussinessService;

import cn.hutool.core.util.StrUtil;


/**
 * 
* Title: BsBussinessController
* Description: 客商档案
* @author 鲁四围 
* @date 2018年4月13日
 */
@RestController
@RequestMapping("bs/bussiness")
public class BsBussinessController extends AbstractController {	
	
	@Autowired
	private IBsBussinessService bsBussinessService;
	
	/**
	 * 列表
	 * 
	 * 
	 */
	@RequestMapping("/v1/list")
	@RequiresPermissions("bs:bussiness:list")
	public Result list(@RequestParam Map<String, Object> params) {
		params.put("companyId", getCurrentCompanyId());
		PageUtils page = bsBussinessService.queryPage(params);
		return Result.ok().put(page);
	}
	
	/**
	 * 信息
	 */
	@RequestMapping("/v1/info")
	@RequiresPermissions("bs:bussiness:info")
	public Result info(@RequestBody String id) {
		BsBussinessEntity bussiness = bsBussinessService.selectById(id);
		return Result.ok().put(bussiness);
	}
	/**
	 * 保存
	 */
	@RequestMapping("/v1/save")
	@RequiresPermissions("bs:bussiness:save")
	public Result save(@RequestBody BsBussinessEntity bussiness) {
		ValidatorUtils.validateEntity(bussiness);
		EntityWrapper<BsBussinessEntity> ew = new EntityWrapper<BsBussinessEntity>();
		ew.eq("bussiness_code", bussiness.getBussinessCode());
		int count = bsBussinessService.selectCount(ew);
		if(count > 0) {
			return Result.error("客商编码已存在");
		}
		bussiness.setCompanyId(getCurrentCompanyId());
		boolean insert = bsBussinessService.insert(bussiness);
		return Result.ok().put(bussiness);
		
	}
	/**
	 * 修改
	 */
	@RequestMapping("/v1/update")
	@RequiresPermissions("bs:bussiness:update")
	public Result update(@RequestBody BsBussinessEntity bussiness) {
		ValidatorUtils.validateEntity(bussiness);
		EntityWrapper<BsBussinessEntity> ew = new EntityWrapper<BsBussinessEntity>();
		ew.eq("bussiness_code", bussiness.getBussinessCode());
		ew.ne("id", bussiness.getId());
		int count = bsBussinessService.selectCount(ew);
		if(count > 0) {
			return Result.error("客商编码已存在");
		}
		bussiness.setCompanyId(getCurrentCompanyId());
		bsBussinessService.updateAllColumnById(bussiness);
		return Result.ok();
	}
	/**
	 * 删除
	 */
	@RequestMapping("/v1/delete")
	@RequiresPermissions("bs:bussiness:delete")
	public Result delete(@RequestBody String id) {
		id = getDelId(id);
		if(StrUtil.isBlank(id)){
			return Result.error("ID不能为空");
		}
		
		bsBussinessService.deleteById(id);
		return Result.ok();
	}
	
	
	@RequestMapping("/v1/saveReComId")
	@RequiresPermissions("bs:bussiness:update")
	public Result saveRelationCompanyId(@RequestParam String busId,@RequestParam String comId) {
		if(StringUtil.isNotBlank(busId) && StringUtil.isNotBlank(comId)) {
			
			return bsBussinessService.saveCompanyIdByBusId(busId,comId);
		}else {
			return Result.error("客商公司id和关联公司id不能为空");
		}
	}
	
}
